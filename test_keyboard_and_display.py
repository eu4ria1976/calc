#!/usr/bin/env python3
"""
Test script to verify keyboard support and display functionality
"""

import sys
import os

# Add the current directory to the Python path
sys.path.insert(0, os.path.dirname(__file__))

from src.calculator.core.calculator import CalculatorController
from src.calculator.gui.display import CalculatorDisplay
import tkinter as tk

def test_display_functionality():
    """Test the display functionality"""
    print("Testing display functionality...")
    
    # Create a mock window for testing
    root = tk.Tk()
    root.withdraw()  # Hide the window
    
    try:
        # Create display
        display = CalculatorDisplay(root)
        
        # Test updating display
        test_values = ["0", "123", "45.67", "-89.1", "Error", "3.141592653589793"]
        
        for value in test_values:
            display.update_display(value)
            print(f"  PASS: Display updated with '{value}'")
            
        # Test clearing display
        display.clear_display()
        print("  PASS: Display cleared")
        
        print("Display functionality test completed successfully")
        
    except Exception as e:
        print(f"  ERROR: Display functionality test failed: {str(e)}")
    finally:
        root.destroy()

def test_keyboard_support():
    """Test keyboard support through expression parser"""
    print("\nTesting keyboard support simulation...")
    
    controller = CalculatorController()
    
    # Test expressions that would be generated by keyboard input
    test_cases = [
        ("2+3", 5),
        ("10-4", 6),
        ("5*6", 30),
        ("20/4", 5),
        ("2^3", 8),  # Power operator
        ("(2+3)*4", 20),  # Parentheses
        ("3.14159", 3.14159),  # Decimal numbers
    ]
    
    print("Testing keyboard-generated expressions:")
    for expression, expected in test_cases:
        try:
            result = controller.process_input(expression)
            if isinstance(result, (int, float)) and abs(result - expected) < 1e-10:
                print(f"  PASS: {expression} = {result}")
            else:
                print(f"  FAIL: {expression} = {result}, expected {expected}")
        except Exception as e:
            print(f"  ERROR: {expression} -> {str(e)}")

if __name__ == "__main__":
    test_display_functionality()
    test_keyboard_support()